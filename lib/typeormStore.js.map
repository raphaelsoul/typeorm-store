{"version":3,"file":"typeormStore.js","mappings":"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","sources":["webpack://typeorm-store/./src/index.ts","webpack://typeorm-store/./src/store.ts","webpack://typeorm-store/external commonjs \"express-session\"","webpack://typeorm-store/external commonjs \"typeorm\"","webpack://typeorm-store/webpack/bootstrap","webpack://typeorm-store/webpack/startup"],"sourcesContent":["export * from './store';\n","import { LessThan, Repository } from 'typeorm';\nimport { Store } from 'express-session';\n\nexport interface SessionEntity {\n  /**\n   * The randomly generated session ID.\n   */\n  id: string;\n\n  /**\n   * The UNIX timestamp at which the session will expire.\n   */\n  expiresAt: number;\n\n  /**\n   * The JSON data of the session.\n   */\n  data: string;\n}\ninterface EventEmitterOptions {\n  /**\n   * Enables automatic capturing of promise rejection.\n   */\n  captureRejections?: boolean | undefined;\n}\nexport interface Options extends EventEmitterOptions {\n  repository: Repository<SessionEntity>;\n\n  /**\n   * Session TTL in seconds. Defaults to 86400 (1 day).\n   */\n  ttl?: number;\n\n  /**\n   * Whether to remove expired sessions from the database. Defaults to true.\n   */\n  clearExpired?: boolean;\n\n  /**\n   * The interval between checking for expired sessions in seconds. Defaults to 86400 (1 day).\n   */\n  expirationInterval?: number;\n}\n\nexport class TypeormStore extends Store {\n  private readonly repository: Repository<SessionEntity>;\n  private readonly ttl?: number;\n  private readonly expirationInterval: number;\n  private expirationIntervalId?: number;\n\n  constructor(options: Options) {\n    super(options);\n\n    if (!options.repository) {\n      throw new Error('The repository option is required');\n    }\n\n    this.repository = options.repository;\n    this.ttl = options.ttl;\n    this.expirationInterval = options.expirationInterval || 86400;\n\n    if (options.clearExpired === undefined || options.clearExpired) {\n      this.setExpirationInterval(this.expirationInterval);\n    }\n  }\n\n  /**\n   * Get all sessions.\n   * @param {(error: any, result?: any) => void} callback\n   */\n  all = (callback: (error: any, result?: any) => void): void => {\n    this.repository\n      .find()\n      .then((sessions: SessionEntity[]) => sessions.map(session => JSON.parse(session.data)))\n      .then((data: any) => callback(null, data))\n      .catch((error: any) => callback(error));\n  };\n\n  /**\n   * Destroy a session\n   * @param {string} id\n   * @param {(error: any) => void} callback\n   */\n  destroy = (id: string, callback?: (error: any) => void): void => {\n    this.repository\n      .delete(id)\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Clear all sessions.\n   * @param {(error: any) => void} callback\n   */\n  clear = (callback?: (error: any) => void): void => {\n    this.repository\n      .clear()\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Get the session count.\n   * @param {(error: any, length?: number) => void} callback\n   */\n  length = (callback: (error: any, length: number) => void): void => {\n    this.repository\n      .count()\n      .then((length: number) => callback(null, length))\n      .catch((error: any) => callback(error, 0));\n  };\n\n  /**\n   * Get a session.\n   * @param {string} id\n   * @param {(error: any, session?: any) => any} callback\n   */\n  get = (id: string, callback: (error: any, session?: any) => void): void => {\n    this.repository\n      .findOne({ where: { id } })\n      .then(session => {\n        if (!session) {\n          return callback(null);\n        }\n        const data = JSON.parse(session.data);\n        callback(null, data);\n      })\n      .catch((error: any) => callback(error));\n  };\n\n  /**\n   * Set a session.\n   * @param {string} id\n   * @param session\n   * @param {(error: any) => void} callback\n   */\n  set = (id: string, session: any, callback?: (error: any) => void): void => {\n    let data;\n    try {\n      data = JSON.stringify(session);\n    } catch (error) {\n      if (callback) {\n        return callback(error);\n      }\n      throw error;\n    }\n\n    const ttl = this.getTTL(session);\n    const expiresAt = Math.floor(new Date().getTime() / 1000) + ttl;\n\n    this.repository\n      .save({ id, data, expiresAt })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Refresh the session expiry time.\n   * @param {string} id\n   * @param session\n   * @param {(error: any) => void} callback\n   */\n  touch = (id: string, session: any, callback?: (error: any) => void): void => {\n    const ttl = this.getTTL(session);\n    const expiresAt = Math.floor(new Date().getTime() / 1000) + ttl;\n\n    this.repository\n      .update(id, { expiresAt })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Remove all expired sessions from the database.\n   * @param {(error: any) => void} callback\n   */\n  clearExpiredSessions = (callback?: (error: any) => void) => {\n    const timestamp = Math.round(new Date().getTime() / 1000);\n\n    this.repository\n      .delete({ expiresAt: LessThan(timestamp) })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Set the expiration interval in seconds. If the interval in seconds is not set, it defaults to the store's expiration interval.\n   * @param {number} interval\n   */\n  setExpirationInterval = (interval?: number) => {\n    interval = interval || this.expirationInterval;\n\n    this.clearExpirationInterval();\n    this.expirationIntervalId = setInterval(this.clearExpiredSessions, interval * 1000);\n  };\n\n  /**\n   * Clear the expiration interval if it exists.\n   */\n  clearExpirationInterval = () => {\n    if (this.expirationIntervalId) {\n      clearInterval(this.expirationIntervalId);\n    }\n\n    this.expirationIntervalId = undefined;\n  };\n\n  /**\n   * Get the session TTL (time to live) in seconds.\n   * @param session\n   * @return {number}\n   */\n  private getTTL = (session: any): number => {\n    if (this.ttl) {\n      return this.ttl;\n    }\n    return session.cookie && session.cookie.maxAge\n      ? Math.floor(session.cookie.maxAge / 1000)\n      : 86400;\n  };\n}\n","module.exports = require(\"express-session\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(923);\n"],"names":["TypeormStore","Store","constructor","options","super","all","callback","this","repository","find","then","sessions","map","session","JSON","parse","data","catch","error","destroy","id","delete","clear","length","count","get","findOne","where","set","stringify","ttl","getTTL","expiresAt","Math","floor","Date","getTime","save","touch","update","clearExpiredSessions","timestamp","round","LessThan","setExpirationInterval","interval","expirationInterval","clearExpirationInterval","expirationIntervalId","setInterval","clearInterval","undefined","cookie","maxAge","Error","clearExpired","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}